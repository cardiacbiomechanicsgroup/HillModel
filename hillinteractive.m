% hillinteractive.m% Uses a simple graphic user interface (GUI) to allow students to prescribe%      length inputs to Hill's model and view the resulting outputs without%      requiring them to write MATLAB code.% This removes some of the flexibility to graph/manipulate results. However, students can use%     MATLAB's workspace browser window to view various matrices, edit or clear them,%     and transfer them to Excel or another plotting program as they would with experimental data.% Set up time axis and examples of classic length inputst = [linspace(0,5,1000)'];L1 = [repmat(1,1000,1)];					% isometric tetanusL2 = [repmat(1,400,1);repmat(0.95,600,1)];	% step length changeL3 = [repmat(1,600,1);linspace(1,0.4,400)'];	% constant-velocity shortening% Next, create figure for specifying muscle length inputscrsz = get(0,'ScreenSize');figure(1);set(1,'Position',[0 0.5*scrsz(4) 0.5*scrsz(3) 0.5*scrsz(4)]);subplot('position',[0.1 0.1 0.5 0.8]);axis([0 5 0 1.2]); grid on;xlabel('Time (sec)'); ylabel('Length/L0'); title('Length Input to Hill Model');hold on;% Set up buttons and controlsx10 = 0.1*0.5*scrsz(3);y10 = 0.1*0.5*scrsz(4);customflag = 0; runflag = 0; L = 0;text1 = uicontrol('Position',[x10*7 y10*7+30 140 45],'Style','text');set(text1,'String','Choose one of three sample inputs or choose to design your own custom input');set(text1,'BackgroundColor',[1 1 1]);isometric = uicontrol('Position',[x10*7 y10*7 60 20]);set(isometric,'BackgroundColor',[0.8 0.8 0.8],'String','Isometric','Callback','L=L1;');stepL = uicontrol('Position',[x10*7 y10*7-30 60 20]);set(stepL,'BackgroundColor',[0.8 0.8 0.8],'String','Step dL','Callback','L=L2;');constV = uicontrol('Position',[x10*7+80 y10*7 60 20]);set(constV,'BackgroundColor',[0.8 0.8 0.8],'String','Constant V','Callback','L=L3;');custom = uicontrol('Position',[x10*7+80 y10*7-30 60 20]);set(custom,'BackgroundColor',[0.8 0.8 0.8],'String','Custom','Callback','customflag = 1;');text3 = uicontrol('Position',[x10*7 y10*5 140 30],'Style','text');set(text3,'String','Then, run the Hill simulation');set(text3,'BackgroundColor',[1 1 1]);runsim = uicontrol('Position',[x10*7 y10*5-30 140 20]);set(runsim,'BackgroundColor',[0.8 0.8 0.8],'String','Run Hill Simulation','Callback','runflag = 1;');text4 = uicontrol('Position',[x10*7 y10*2 140 45],'Style','text');set(text4,'String','You can check the box below to hold plots while running new simulations');set(text4,'BackgroundColor',[1 1 1]);holdrun = uicontrol('Position',[x10*7 y10*2-30 140 20],'Style','checkbox');set(holdrun,'BackgroundColor',[0.8 0.8 0.8],'String','Check to Hold Plots');% First, wait for input to be established, either by selecting sample or choosing custom optionwhile size(L,1)==1,   waitforbuttonpress; pause(0.2);% If custom, accept input points from mouse, then round to eliminate small positioning errors% Fill in missing data if student did not enter data across full time domain, then translate into appropriate length input for function hillif customflag==1   clear j; clear X; clear point;   text2 = uicontrol('Position',[x10*2 y10*2 200 50],'Style','text');   set(text2,'String','Click on inflection points to outline your input function; points will be connected by straight lines later. Hit RETURN when finished.');   set(text2,'BackgroundColor',[0.8 0.8 0.8]);   figure(1)   if get(holdrun,'Value')==0      hold off; plot(0.5,0.1,'wo');      axis([0 5 0 1.2]); grid on;      xlabel('Time (sec)'); ylabel('Length/L0'); title('Length Input to Hill Model');     hold on;   end         for j = 1:10,      point = ginput(1);      if any(point)         plot (point(1),point(2),'ro');         X(j,1) = point (1);         X(j,2) = point (2);      else         break      end   end   X = round(X*10)/10;   if lt(X(1,1),0)      X(1,1) = 0;   end   if ne(X(1,1),0)      X = [0,X(1,2);X];   end   if gt(X(size(X,1),1),5)      X(size(X,1),1) = 5;   end   if ne(X(size(X,1),1),5)       X = [X;5,X(size(X,1),2)];   end   X(:,1) = X(:,1)+ [linspace(0.000,0.0001*(size(X,1)-1),size(X,1))]';   L = interp1(X(:,1),X(:,2),t,'linear');   set(text2,'Visible','off');endend% Once input is determined, plot chosen input function and wait for signal to continueholdflag = 'off';if get(holdrun,'Value')==1   holdflag = 'on';endfigure(1); subplot('position',[0.1 0.1 0.5 0.8]);hold (holdflag); plot(t,L,'r');axis([0 5 0 1.2]); grid on; hold on;xlabel('Time (sec)'); ylabel('Length/L0'); title('Length Input to Hill Model');while runflag == 0,   waitforbuttonpress; pause(0.2);end% Run function hill when appropriate button is pressed, and plot outputsif get(holdrun,'Value')==1   holdflag = 'on';endif runflag == 1   [P,H,Lse,Lce] = hill(L,t);   figure(2);   set(2,'Position',[0.4*scrsz(3) 0.5*scrsz(4) 0.5*scrsz(3) 0.5*scrsz(4)]);   subplot(2,2,1); hold(holdflag); plot(t,P,'r'); axis([0 5 0 200]); xlabel('Time (sec)'); ylabel('Force (mN/mm2)'); hold on;   subplot(2,2,3); hold(holdflag); plot(t,H,'r');axis([0 5 0 50]); xlabel('Time (sec)'); ylabel('Heat/Length'); hold on;   subplot(2,2,2); hold(holdflag); plot(t,Lse,'g'); axis([0 5 0 1]);xlabel('Time (sec)'); ylabel('Lseries/L0'); hold on;   subplot(2,2,4); hold(holdflag); plot(t,Lce,'b'); axis([0 5 0 1]); xlabel('Time (sec)'); ylabel('Lcontractile/L0'); hold on;   runflag = 0;end